document.addEventListener("alpine:init", () => { Alpine.data("tableWrapper", (e, t) => ({ childElementOpen: !1, filtersOpen: e.entangle("filterSlideDownDefaultVisible"), paginationCurrentCount: e.entangle("paginationCurrentCount").live, paginationTotalItemCount: e.entangle("paginationTotalItemCount").live, paginationCurrentItems: e.entangle("paginationCurrentItems").live, selectedItems: e.entangle("selected"), alwaysShowBulkActions: !e.entangle("hideBulkActionsWhenEmpty"), toggleSelectAll() { t && (this.paginationTotalItemCount === this.selectedItems.length ? this.clearSelected() : this.setAllSelected()) }, setAllSelected() { t && e.setAllSelected() }, clearSelected() { t && e.clearSelected() }, selectAllOnPage() { if (!t) return; let e = this.selectedItems, i = this.paginationCurrentItems.values(); for (let l of i) e.push(l.toString()); this.selectedItems = [...new Set(e)] } })), Alpine.data("reorderFunction", (e, t, i) => ({ dragging: !1, reorderEnabled: !1, sourceID: "", targetID: "", evenRowClasses: "", oddRowClasses: "", currentlyHighlightedElement: "", evenRowClassArray: {}, oddRowClassArray: {}, evenNotInOdd: {}, oddNotInEven: {}, orderedRows: [], defaultReorderColumn: e.entangle("defaultReorderColumn"), reorderStatus: e.entangle("reorderStatus"), currentlyReorderingStatus: e.entangle("currentlyReorderingStatus"), hideReorderColumnUnlessReorderingStatus: e.entangle("hideReorderColumnUnlessReorderingStatus"), reorderDisplayColumn: e.entangle("reorderDisplayColumn"), reorderCurrentPageOnly: e.entangle("reorderCurrentPageOnly"), dragStart(e) { this.sourceID = e.target.id, e.dataTransfer.effectAllowed = "move", e.dataTransfer.setData("text/plain", e.target.id), e.target.classList.add("laravel-livewire-tables-dragging"), (0 == this.evenNotInOdd.length || 0 == this.oddNotInEven.length) && this.setupEvenOddClasses() }, dragOverEvent(e) { "object" == typeof this.currentlyHighlightedElement && this.currentlyHighlightedElement.classList.remove("laravel-livewire-tables-highlight-bottom", "laravel-livewire-tables-highlight-top"); let t = e.target.closest("tr"); this.currentlyHighlightedElement = t, e.offsetY < t.getBoundingClientRect().height / 2 ? (t.classList.add("laravel-livewire-tables-highlight-top"), t.classList.remove("laravel-livewire-tables-highlight-bottom")) : (t.classList.remove("laravel-livewire-tables-highlight-top"), t.classList.add("laravel-livewire-tables-highlight-bottom")) }, dragLeaveEvent(e) { e.target.closest("tr").classList.remove("laravel-livewire-tables-highlight-bottom", "laravel-livewire-tables-highlight-top") }, dropEvent(e) { "object" == typeof this.currentlyHighlightedElement && this.currentlyHighlightedElement.classList.remove("laravel-livewire-tables-highlight-bottom", "laravel-livewire-tables-highlight-top"); let l = e.target.closest("tr"), r = e.target.closest("tr").parentNode, a = document.getElementById(this.sourceID).closest("tr"); a.classList.remove("laravel-livewire-table-dragging"); let s = a.rowIndex, n = l.rowIndex, o = document.getElementById(t), d = s; e.offsetY > l.getBoundingClientRect().height / 2 ? r.insertBefore(a, l.nextSibling) : r.insertBefore(a, l), n < s && (d = n); let h = "even"; this.orderedRows = []; for (let g = 1, u; u = o.rows[g]; g++)u.classList.contains("hidden") || (this.orderedRows.push({ [i]: u.getAttribute("rowpk"), [this.defaultReorderColumn]: g }), "even" === h ? (u.classList.remove(...this.oddNotInEven), u.classList.add(...this.evenNotInOdd), h = "odd") : (u.classList.remove(...this.evenNotInOdd), u.classList.add(...this.oddNotInEven), h = "even")) }, reorderToggle() { this.currentlyReorderingStatus ? e.disableReordering() : (this.currentlyReorderingStatus = !0, this.hideReorderColumnUnlessReorderingStatus && (this.reorderDisplayColumn = !0, e.enableReordering())) }, cancelReorder() { this.currentlyReorderingStatus = !1, this.hideReorderColumnUnlessReorderingStatus && (this.reorderDisplayColumn = !1) }, updateOrderedItems() { this.currentlyReorderingStatus = !1, this.hideReorderColumnUnlessReorderingStatus && (this.reorderDisplayColumn = !1), e.set("orderedItems", this.orderedRows), this.reorderCurrentPageOnly || e.disableReordering() }, setupEvenOddClasses() { let e = document.getElementById(t).getElementsByTagName("tbody")[0], i = [], l = []; void 0 !== e.rows[2] && (i = Array.from(e.rows[2].classList)), void 0 !== e.rows[3] && (l = Array.from(e.rows[3].classList)), this.evenNotInOdd = i.filter(e => !l.includes(e)), this.oddNotInEven = l.filter(e => !i.includes(e)) }, init() { this.setupEvenOddClasses() } })), Alpine.data("numberRangeFilter", (e, t, i, l, r) => ({ allFilters: e.entangle("filterComponents", !0), originalMin: 0, originalMax: 100, filterMin: 0, filterMax: 100, currentMin: 0, currentMax: 100, hasUpdate: !1, wireValues: e.entangle("filterComponents." + t, !0), defaultMin: l.minRange, defaultMax: l.maxRange, restrictUpdates: !1, updateStyles() { let e = document.getElementById(i), t = document.getElementById(r + "-min"), l = document.getElementById(r + "-max"); e.style.setProperty("--value-a", t.value), e.style.setProperty("--text-value-a", JSON.stringify(t.value)), e.style.setProperty("--value-b", l.value), e.style.setProperty("--text-value-b", JSON.stringify(l.value)) }, setupWire() { void 0 !== this.wireValues ? (this.filterMin = this.originalMin = void 0 !== this.wireValues.min ? this.wireValues.min : this.defaultMin, this.filterMax = this.originalMax = void 0 !== this.wireValues.max ? this.wireValues.max : this.defaultMax) : (this.filterMin = this.originalMin = this.defaultMin, this.filterMax = this.originalMax = this.defaultMax), this.updateStyles() }, allowUpdates() { this.updateWire() }, updateWire() { let e = parseInt(this.filterMin), t = parseInt(this.filterMax); (e != this.originalMin || t != this.originalMax) && (t < e && (this.filterMin = t, this.filterMax = e), this.hasUpdate = !0, this.originalMin = e, this.originalMax = t), this.updateStyles() }, updateWireable() { this.hasUpdate && (this.hasUpdate = !1, this.wireValues = { min: this.filterMin, max: this.filterMax }) }, init() { this.setupWire(), this.$watch("allFilters", e => this.setupWire()) } })), Alpine.data("flatpickrFilter", (e, t, i, l, r) => ({ wireValues: e.entangle("filterComponents." + t, !0), flatpickrInstance: flatpickr(l, { mode: "range", clickOpens: !0, allowInvalidPreload: !0, defaultDate: [], ariaDateFormat: i.ariaDateFormat, allowInput: i.allowInput, altFormat: i.altFormat, altInput: i.altInput, dateFormat: i.dateFormat, locale: "en", minDate: i.earliestDate, maxDate: i.latestDate, onOpen: function () { window.childElementOpen = !0 }, onChange: function (i, l, r) { if (i.length > 1) { var a = l.split(" ")[0], s = l.split(" ")[2], n = {}; window.childElementOpen = !1, window.filterPopoverOpen = !1, n = { minDate: a, maxDate: s }, e.set("filterComponents." + t, n) } } }), setupWire() { if (void 0 !== this.wireValues) { if (void 0 !== this.wireValues.minDate && void 0 !== this.wireValues.maxDate) { let e = [this.wireValues.minDate, this.wireValues.maxDate]; this.flatpickrInstance.setDate(e) } else this.flatpickrInstance.setDate([]) } else this.flatpickrInstance.setDate([]) }, init() { this.setupWire(), this.$watch("wireValues", e => this.setupWire()) } })) });
